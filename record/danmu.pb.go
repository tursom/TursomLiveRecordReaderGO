// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.0
// source: danmu.proto

package record

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmeEnum int32

const (
	// 未知
	CmeEnum_UNKNOWN CmeEnum = 0
	// 活动旗帜更新 v2？
	CmeEnum_ACTIVITY_BANNER_UPDATE_V2 CmeEnum = 1
	// 组合结束？
	CmeEnum_COMBO_END CmeEnum = 2
	// 组合发送？
	CmeEnum_COMBO_SEND CmeEnum = 3
	// 弹幕信息
	CmeEnum_DANMU_MSG CmeEnum = 4
	// 进入效果？
	CmeEnum_ENTRY_EFFECT CmeEnum = 5
	// GUARD购买？
	CmeEnum_GUARD_BUY CmeEnum = 6
	// GUARD抽奖开始？
	CmeEnum_GUARD_LOTTERY_START CmeEnum = 7
	// GUARD信息？
	CmeEnum_GUARD_MSG CmeEnum = 8
	// 直播开始
	CmeEnum_LIVE CmeEnum = 9
	// 房间块信息？
	CmeEnum_ROOM_BLOCK_MSG CmeEnum = 10
	// 房间变更？
	CmeEnum_ROOM_CHANGE CmeEnum = 11
	// 房间等级？
	CmeEnum_ROOM_RANK CmeEnum = 12
	// 房间准确时间信息更新？
	CmeEnum_ROOM_REAL_TIME_MESSAGE_UPDATE CmeEnum = 13
	// 提示信息？
	CmeEnum_NOTICE_MSG CmeEnum = 14
	// 准备中？
	CmeEnum_PREPARING CmeEnum = 15
	// 发送礼物
	CmeEnum_SEND_GIFT CmeEnum = 16
	// 超级聊天消息？SC？
	CmeEnum_SUPER_CHAT_MESSAGE CmeEnum = 17
	// 超级聊天消息日语？
	CmeEnum_SUPER_CHAT_MESSAGE_JPN CmeEnum = 18
	// 用户吐司信息？
	CmeEnum_USER_TOAST_MSG CmeEnum = 19
	// 周星钟？
	CmeEnum_WEEK_STAR_CLOCK CmeEnum = 20
	// 欢迎？
	CmeEnum_WELCOME CmeEnum = 21
	// 欢迎舰长？
	CmeEnum_WELCOME_GUARD CmeEnum = 22
	// 希望瓶
	CmeEnum_WISH_BOTTLE CmeEnum = 23
	// 开始抽奖
	CmeEnum_RAFFLE_START CmeEnum = 24
	// 抽奖结束
	CmeEnum_RAFFLE_END                 CmeEnum = 25
	CmeEnum_ROOM_SKIN_MSG              CmeEnum = 26
	CmeEnum_SPECIAL_GIFT               CmeEnum = 27
	CmeEnum_ROOM_SILENT_ON             CmeEnum = 28
	CmeEnum_HOUR_RANK_AWARDS           CmeEnum = 29
	CmeEnum_ROOM_BOX_MASTER            CmeEnum = 30
	CmeEnum_PK_BATTLE_ENTRANCE         CmeEnum = 31
	CmeEnum_SYS_GIFT                   CmeEnum = 32
	CmeEnum_new_anchor_reward          CmeEnum = 33
	CmeEnum_VOICE_JOIN_LIST            CmeEnum = 34
	CmeEnum_GUARD_ACHIEVEMENT_ROOM     CmeEnum = 35
	CmeEnum_VOICE_JOIN_ROOM_COUNT_INFO CmeEnum = 36
)

// Enum value maps for CmeEnum.
var (
	CmeEnum_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ACTIVITY_BANNER_UPDATE_V2",
		2:  "COMBO_END",
		3:  "COMBO_SEND",
		4:  "DANMU_MSG",
		5:  "ENTRY_EFFECT",
		6:  "GUARD_BUY",
		7:  "GUARD_LOTTERY_START",
		8:  "GUARD_MSG",
		9:  "LIVE",
		10: "ROOM_BLOCK_MSG",
		11: "ROOM_CHANGE",
		12: "ROOM_RANK",
		13: "ROOM_REAL_TIME_MESSAGE_UPDATE",
		14: "NOTICE_MSG",
		15: "PREPARING",
		16: "SEND_GIFT",
		17: "SUPER_CHAT_MESSAGE",
		18: "SUPER_CHAT_MESSAGE_JPN",
		19: "USER_TOAST_MSG",
		20: "WEEK_STAR_CLOCK",
		21: "WELCOME",
		22: "WELCOME_GUARD",
		23: "WISH_BOTTLE",
		24: "RAFFLE_START",
		25: "RAFFLE_END",
		26: "ROOM_SKIN_MSG",
		27: "SPECIAL_GIFT",
		28: "ROOM_SILENT_ON",
		29: "HOUR_RANK_AWARDS",
		30: "ROOM_BOX_MASTER",
		31: "PK_BATTLE_ENTRANCE",
		32: "SYS_GIFT",
		33: "new_anchor_reward",
		34: "VOICE_JOIN_LIST",
		35: "GUARD_ACHIEVEMENT_ROOM",
		36: "VOICE_JOIN_ROOM_COUNT_INFO",
	}
	CmeEnum_value = map[string]int32{
		"UNKNOWN":                       0,
		"ACTIVITY_BANNER_UPDATE_V2":     1,
		"COMBO_END":                     2,
		"COMBO_SEND":                    3,
		"DANMU_MSG":                     4,
		"ENTRY_EFFECT":                  5,
		"GUARD_BUY":                     6,
		"GUARD_LOTTERY_START":           7,
		"GUARD_MSG":                     8,
		"LIVE":                          9,
		"ROOM_BLOCK_MSG":                10,
		"ROOM_CHANGE":                   11,
		"ROOM_RANK":                     12,
		"ROOM_REAL_TIME_MESSAGE_UPDATE": 13,
		"NOTICE_MSG":                    14,
		"PREPARING":                     15,
		"SEND_GIFT":                     16,
		"SUPER_CHAT_MESSAGE":            17,
		"SUPER_CHAT_MESSAGE_JPN":        18,
		"USER_TOAST_MSG":                19,
		"WEEK_STAR_CLOCK":               20,
		"WELCOME":                       21,
		"WELCOME_GUARD":                 22,
		"WISH_BOTTLE":                   23,
		"RAFFLE_START":                  24,
		"RAFFLE_END":                    25,
		"ROOM_SKIN_MSG":                 26,
		"SPECIAL_GIFT":                  27,
		"ROOM_SILENT_ON":                28,
		"HOUR_RANK_AWARDS":              29,
		"ROOM_BOX_MASTER":               30,
		"PK_BATTLE_ENTRANCE":            31,
		"SYS_GIFT":                      32,
		"new_anchor_reward":             33,
		"VOICE_JOIN_LIST":               34,
		"GUARD_ACHIEVEMENT_ROOM":        35,
		"VOICE_JOIN_ROOM_COUNT_INFO":    36,
	}
)

func (x CmeEnum) Enum() *CmeEnum {
	p := new(CmeEnum)
	*p = x
	return p
}

func (x CmeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_danmu_proto_enumTypes[0].Descriptor()
}

func (CmeEnum) Type() protoreflect.EnumType {
	return &file_danmu_proto_enumTypes[0]
}

func (x CmeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmeEnum.Descriptor instead.
func (CmeEnum) EnumDescriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{0}
}

type NavigationEnum int32

const (
	NavigationEnum_NONE     NavigationEnum = 0
	NavigationEnum_GOVERNOR NavigationEnum = 1
	NavigationEnum_ADMIRAL  NavigationEnum = 2
	NavigationEnum_CAPTAIN  NavigationEnum = 3
)

// Enum value maps for NavigationEnum.
var (
	NavigationEnum_name = map[int32]string{
		0: "NONE",
		1: "GOVERNOR",
		2: "ADMIRAL",
		3: "CAPTAIN",
	}
	NavigationEnum_value = map[string]int32{
		"NONE":     0,
		"GOVERNOR": 1,
		"ADMIRAL":  2,
		"CAPTAIN":  3,
	}
)

func (x NavigationEnum) Enum() *NavigationEnum {
	p := new(NavigationEnum)
	*p = x
	return p
}

func (x NavigationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_danmu_proto_enumTypes[1].Descriptor()
}

func (NavigationEnum) Type() protoreflect.EnumType {
	return &file_danmu_proto_enumTypes[1]
}

func (x NavigationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigationEnum.Descriptor instead.
func (NavigationEnum) EnumDescriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{1}
}

type DanmuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Danmu      string          `protobuf:"bytes,1,opt,name=danmu,proto3" json:"danmu,omitempty"`
	Metadata   *DanmuMetadata  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	UserInfo   *DanmuUserInfo  `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	BrandInfo  *DanmuBrandInfo `protobuf:"bytes,4,opt,name=brandInfo,proto3" json:"brandInfo,omitempty"`
	UserLevel  *DanmuUserLevel `protobuf:"bytes,5,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
	UserTitle  string          `protobuf:"bytes,6,opt,name=userTitle,proto3" json:"userTitle,omitempty"`
	Navigation NavigationEnum  `protobuf:"varint,7,opt,name=navigation,proto3,enum=cn.tursom.danmu.NavigationEnum" json:"navigation,omitempty"`
	OriginData string          `protobuf:"bytes,8,opt,name=originData,proto3" json:"originData,omitempty"`
}

func (x *DanmuInfo) Reset() {
	*x = DanmuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuInfo) ProtoMessage() {}

func (x *DanmuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuInfo.ProtoReflect.Descriptor instead.
func (*DanmuInfo) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{0}
}

func (x *DanmuInfo) GetDanmu() string {
	if x != nil {
		return x.Danmu
	}
	return ""
}

func (x *DanmuInfo) GetMetadata() *DanmuMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DanmuInfo) GetUserInfo() *DanmuUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DanmuInfo) GetBrandInfo() *DanmuBrandInfo {
	if x != nil {
		return x.BrandInfo
	}
	return nil
}

func (x *DanmuInfo) GetUserLevel() *DanmuUserLevel {
	if x != nil {
		return x.UserLevel
	}
	return nil
}

func (x *DanmuInfo) GetUserTitle() string {
	if x != nil {
		return x.UserTitle
	}
	return ""
}

func (x *DanmuInfo) GetNavigation() NavigationEnum {
	if x != nil {
		return x.Navigation
	}
	return NavigationEnum_NONE
}

func (x *DanmuInfo) GetOriginData() string {
	if x != nil {
		return x.OriginData
	}
	return ""
}

type Gift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action            string          `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	AddFollow         int32           `protobuf:"varint,2,opt,name=addFollow,proto3" json:"addFollow,omitempty"`
	BatchComboId      string          `protobuf:"bytes,3,opt,name=batch_combo_id,json=batchComboId,proto3" json:"batch_combo_id,omitempty"`
	BatchComboSend    *BatchComboSend `protobuf:"bytes,4,opt,name=batch_combo_send,json=batchComboSend,proto3" json:"batch_combo_send,omitempty"`
	BeatId            string          `protobuf:"bytes,5,opt,name=beatId,proto3" json:"beatId,omitempty"`
	BizSource         string          `protobuf:"bytes,6,opt,name=biz_source,json=bizSource,proto3" json:"biz_source,omitempty"`
	BroadcastId       int32           `protobuf:"varint,7,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	CoinType          string          `protobuf:"bytes,8,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	ComboSend         *ComboSend      `protobuf:"bytes,9,opt,name=combo_send,json=comboSend,proto3" json:"combo_send,omitempty"`
	ComboStayTime     int32           `protobuf:"varint,10,opt,name=combo_stay_time,json=comboStayTime,proto3" json:"combo_stay_time,omitempty"`
	ComboTotalCoin    int32           `protobuf:"varint,11,opt,name=combo_total_coin,json=comboTotalCoin,proto3" json:"combo_total_coin,omitempty"`
	CritProb          int32           `protobuf:"varint,12,opt,name=crit_prob,json=critProb,proto3" json:"crit_prob,omitempty"`
	Demarcation       int32           `protobuf:"varint,13,opt,name=demarcation,proto3" json:"demarcation,omitempty"`
	Draw              int32           `protobuf:"varint,14,opt,name=draw,proto3" json:"draw,omitempty"`
	Effect            int32           `protobuf:"varint,15,opt,name=effect,proto3" json:"effect,omitempty"`
	EffectBlock       int32           `protobuf:"varint,16,opt,name=effect_block,json=effectBlock,proto3" json:"effect_block,omitempty"`
	EventNum          int32           `protobuf:"varint,17,opt,name=eventNum,proto3" json:"eventNum,omitempty"`
	EventScore        int32           `protobuf:"varint,18,opt,name=eventScore,proto3" json:"eventScore,omitempty"`
	Face              string          `protobuf:"bytes,19,opt,name=face,proto3" json:"face,omitempty"`
	GiftId            int32           `protobuf:"varint,20,opt,name=giftId,proto3" json:"giftId,omitempty"`
	GiftName          string          `protobuf:"bytes,21,opt,name=giftName,proto3" json:"giftName,omitempty"`
	GiftType          int32           `protobuf:"varint,22,opt,name=giftType,proto3" json:"giftType,omitempty"`
	Gold              int32           `protobuf:"varint,23,opt,name=gold,proto3" json:"gold,omitempty"`
	GuardLevel        int32           `protobuf:"varint,24,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	IsFirst           bool            `protobuf:"varint,25,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
	Medal             []string        `protobuf:"bytes,26,rep,name=medal,proto3" json:"medal,omitempty"`
	Metadata          string          `protobuf:"bytes,27,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NewMedal          int32           `protobuf:"varint,28,opt,name=newMedal,proto3" json:"newMedal,omitempty"`
	NewTitle          int32           `protobuf:"varint,29,opt,name=newTitle,proto3" json:"newTitle,omitempty"`
	NoticeMsg         []string        `protobuf:"bytes,30,rep,name=notice_msg,json=noticeMsg,proto3" json:"notice_msg,omitempty"`
	Num               int32           `protobuf:"varint,31,opt,name=num,proto3" json:"num,omitempty"`
	Price             int32           `protobuf:"varint,32,opt,name=price,proto3" json:"price,omitempty"`
	Rcost             int32           `protobuf:"varint,33,opt,name=rcost,proto3" json:"rcost,omitempty"`
	Remain            int32           `protobuf:"varint,34,opt,name=remain,proto3" json:"remain,omitempty"`
	Rnd               string          `protobuf:"bytes,35,opt,name=rnd,proto3" json:"rnd,omitempty"`
	Silver            int32           `protobuf:"varint,36,opt,name=silver,proto3" json:"silver,omitempty"`
	SmallTVCountFlag  bool            `protobuf:"varint,37,opt,name=smallTVCountFlag,proto3" json:"smallTVCountFlag,omitempty"`
	SmalltvMsg        []string        `protobuf:"bytes,38,rep,name=smalltv_msg,json=smalltvMsg,proto3" json:"smalltv_msg,omitempty"`
	Super             int32           `protobuf:"varint,39,opt,name=super,proto3" json:"super,omitempty"`
	SuperBatchGiftNum int32           `protobuf:"varint,40,opt,name=super_batch_gift_num,json=superBatchGiftNum,proto3" json:"super_batch_gift_num,omitempty"`
	SuperGiftNum      int32           `protobuf:"varint,41,opt,name=super_gift_num,json=superGiftNum,proto3" json:"super_gift_num,omitempty"`
	TagImage          string          `protobuf:"bytes,42,opt,name=tag_image,json=tagImage,proto3" json:"tag_image,omitempty"`
	Tid               string          `protobuf:"bytes,43,opt,name=tid,proto3" json:"tid,omitempty"`
	Timestamp         int32           `protobuf:"varint,44,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Title             string          `protobuf:"bytes,45,opt,name=title,proto3" json:"title,omitempty"`
	TopList           []string        `protobuf:"bytes,46,rep,name=top_list,json=topList,proto3" json:"top_list,omitempty"`
	TotalCoin         int32           `protobuf:"varint,47,opt,name=total_coin,json=totalCoin,proto3" json:"total_coin,omitempty"`
	Uid               int32           `protobuf:"varint,48,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname             string          `protobuf:"bytes,49,opt,name=uname,proto3" json:"uname,omitempty"`
}

func (x *Gift) Reset() {
	*x = Gift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gift) ProtoMessage() {}

func (x *Gift) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gift.ProtoReflect.Descriptor instead.
func (*Gift) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{1}
}

func (x *Gift) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Gift) GetAddFollow() int32 {
	if x != nil {
		return x.AddFollow
	}
	return 0
}

func (x *Gift) GetBatchComboId() string {
	if x != nil {
		return x.BatchComboId
	}
	return ""
}

func (x *Gift) GetBatchComboSend() *BatchComboSend {
	if x != nil {
		return x.BatchComboSend
	}
	return nil
}

func (x *Gift) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *Gift) GetBizSource() string {
	if x != nil {
		return x.BizSource
	}
	return ""
}

func (x *Gift) GetBroadcastId() int32 {
	if x != nil {
		return x.BroadcastId
	}
	return 0
}

func (x *Gift) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *Gift) GetComboSend() *ComboSend {
	if x != nil {
		return x.ComboSend
	}
	return nil
}

func (x *Gift) GetComboStayTime() int32 {
	if x != nil {
		return x.ComboStayTime
	}
	return 0
}

func (x *Gift) GetComboTotalCoin() int32 {
	if x != nil {
		return x.ComboTotalCoin
	}
	return 0
}

func (x *Gift) GetCritProb() int32 {
	if x != nil {
		return x.CritProb
	}
	return 0
}

func (x *Gift) GetDemarcation() int32 {
	if x != nil {
		return x.Demarcation
	}
	return 0
}

func (x *Gift) GetDraw() int32 {
	if x != nil {
		return x.Draw
	}
	return 0
}

func (x *Gift) GetEffect() int32 {
	if x != nil {
		return x.Effect
	}
	return 0
}

func (x *Gift) GetEffectBlock() int32 {
	if x != nil {
		return x.EffectBlock
	}
	return 0
}

func (x *Gift) GetEventNum() int32 {
	if x != nil {
		return x.EventNum
	}
	return 0
}

func (x *Gift) GetEventScore() int32 {
	if x != nil {
		return x.EventScore
	}
	return 0
}

func (x *Gift) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *Gift) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *Gift) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *Gift) GetGiftType() int32 {
	if x != nil {
		return x.GiftType
	}
	return 0
}

func (x *Gift) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *Gift) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *Gift) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *Gift) GetMedal() []string {
	if x != nil {
		return x.Medal
	}
	return nil
}

func (x *Gift) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Gift) GetNewMedal() int32 {
	if x != nil {
		return x.NewMedal
	}
	return 0
}

func (x *Gift) GetNewTitle() int32 {
	if x != nil {
		return x.NewTitle
	}
	return 0
}

func (x *Gift) GetNoticeMsg() []string {
	if x != nil {
		return x.NoticeMsg
	}
	return nil
}

func (x *Gift) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Gift) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Gift) GetRcost() int32 {
	if x != nil {
		return x.Rcost
	}
	return 0
}

func (x *Gift) GetRemain() int32 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *Gift) GetRnd() string {
	if x != nil {
		return x.Rnd
	}
	return ""
}

func (x *Gift) GetSilver() int32 {
	if x != nil {
		return x.Silver
	}
	return 0
}

func (x *Gift) GetSmallTVCountFlag() bool {
	if x != nil {
		return x.SmallTVCountFlag
	}
	return false
}

func (x *Gift) GetSmalltvMsg() []string {
	if x != nil {
		return x.SmalltvMsg
	}
	return nil
}

func (x *Gift) GetSuper() int32 {
	if x != nil {
		return x.Super
	}
	return 0
}

func (x *Gift) GetSuperBatchGiftNum() int32 {
	if x != nil {
		return x.SuperBatchGiftNum
	}
	return 0
}

func (x *Gift) GetSuperGiftNum() int32 {
	if x != nil {
		return x.SuperGiftNum
	}
	return 0
}

func (x *Gift) GetTagImage() string {
	if x != nil {
		return x.TagImage
	}
	return ""
}

func (x *Gift) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *Gift) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Gift) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Gift) GetTopList() []string {
	if x != nil {
		return x.TopList
	}
	return nil
}

func (x *Gift) GetTotalCoin() int32 {
	if x != nil {
		return x.TotalCoin
	}
	return 0
}

func (x *Gift) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Gift) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

type DanmuMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	RhythmStorm bool  `protobuf:"varint,2,opt,name=rhythmStorm,proto3" json:"rhythmStorm,omitempty"`
}

func (x *DanmuMetadata) Reset() {
	*x = DanmuMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuMetadata) ProtoMessage() {}

func (x *DanmuMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuMetadata.ProtoReflect.Descriptor instead.
func (*DanmuMetadata) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{2}
}

func (x *DanmuMetadata) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DanmuMetadata) GetRhythmStorm() bool {
	if x != nil {
		return x.RhythmStorm
	}
	return false
}

type DanmuUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Admin    bool   `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	Vip      bool   `protobuf:"varint,4,opt,name=vip,proto3" json:"vip,omitempty"`
	Svip     bool   `protobuf:"varint,5,opt,name=svip,proto3" json:"svip,omitempty"`
}

func (x *DanmuUserInfo) Reset() {
	*x = DanmuUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuUserInfo) ProtoMessage() {}

func (x *DanmuUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuUserInfo.ProtoReflect.Descriptor instead.
func (*DanmuUserInfo) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{3}
}

func (x *DanmuUserInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DanmuUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *DanmuUserInfo) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

func (x *DanmuUserInfo) GetVip() bool {
	if x != nil {
		return x.Vip
	}
	return false
}

func (x *DanmuUserInfo) GetSvip() bool {
	if x != nil {
		return x.Svip
	}
	return false
}

type DanmuBrandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Sing   string `protobuf:"bytes,2,opt,name=sing,proto3" json:"sing,omitempty"`
	Anchor string `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	RoomId int32  `protobuf:"varint,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *DanmuBrandInfo) Reset() {
	*x = DanmuBrandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuBrandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuBrandInfo) ProtoMessage() {}

func (x *DanmuBrandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuBrandInfo.ProtoReflect.Descriptor instead.
func (*DanmuBrandInfo) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{4}
}

func (x *DanmuBrandInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DanmuBrandInfo) GetSing() string {
	if x != nil {
		return x.Sing
	}
	return ""
}

func (x *DanmuBrandInfo) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *DanmuBrandInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type DanmuUserLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Ranking string `protobuf:"bytes,2,opt,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *DanmuUserLevel) Reset() {
	*x = DanmuUserLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DanmuUserLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanmuUserLevel) ProtoMessage() {}

func (x *DanmuUserLevel) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanmuUserLevel.ProtoReflect.Descriptor instead.
func (*DanmuUserLevel) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{5}
}

func (x *DanmuUserLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DanmuUserLevel) GetRanking() string {
	if x != nil {
		return x.Ranking
	}
	return ""
}

type ComboSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	ComboId  string `protobuf:"bytes,2,opt,name=combo_id,json=comboId,proto3" json:"combo_id,omitempty"`
	ComboNum int32  `protobuf:"varint,3,opt,name=combo_num,json=comboNum,proto3" json:"combo_num,omitempty"`
	GiftId   int32  `protobuf:"varint,4,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	GiftName string `protobuf:"bytes,5,opt,name=gift_name,json=giftName,proto3" json:"gift_name,omitempty"`
	GiftNum  int32  `protobuf:"varint,6,opt,name=gift_num,json=giftNum,proto3" json:"gift_num,omitempty"`
	Uid      int32  `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname    string `protobuf:"bytes,8,opt,name=uname,proto3" json:"uname,omitempty"`
}

func (x *ComboSend) Reset() {
	*x = ComboSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboSend) ProtoMessage() {}

func (x *ComboSend) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboSend.ProtoReflect.Descriptor instead.
func (*ComboSend) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{6}
}

func (x *ComboSend) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ComboSend) GetComboId() string {
	if x != nil {
		return x.ComboId
	}
	return ""
}

func (x *ComboSend) GetComboNum() int32 {
	if x != nil {
		return x.ComboNum
	}
	return 0
}

func (x *ComboSend) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *ComboSend) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *ComboSend) GetGiftNum() int32 {
	if x != nil {
		return x.GiftNum
	}
	return 0
}

func (x *ComboSend) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ComboSend) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

type BatchComboSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	BatchComboId  string `protobuf:"bytes,2,opt,name=batch_combo_id,json=batchComboId,proto3" json:"batch_combo_id,omitempty"`
	BatchComboNum int32  `protobuf:"varint,3,opt,name=batch_combo_num,json=batchComboNum,proto3" json:"batch_combo_num,omitempty"`
	GiftId        int32  `protobuf:"varint,4,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	GiftName      string `protobuf:"bytes,5,opt,name=gift_name,json=giftName,proto3" json:"gift_name,omitempty"`
	GiftNum       int32  `protobuf:"varint,6,opt,name=gift_num,json=giftNum,proto3" json:"gift_num,omitempty"`
	Uid           int32  `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname         string `protobuf:"bytes,8,opt,name=uname,proto3" json:"uname,omitempty"`
}

func (x *BatchComboSend) Reset() {
	*x = BatchComboSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_danmu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchComboSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchComboSend) ProtoMessage() {}

func (x *BatchComboSend) ProtoReflect() protoreflect.Message {
	mi := &file_danmu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchComboSend.ProtoReflect.Descriptor instead.
func (*BatchComboSend) Descriptor() ([]byte, []int) {
	return file_danmu_proto_rawDescGZIP(), []int{7}
}

func (x *BatchComboSend) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *BatchComboSend) GetBatchComboId() string {
	if x != nil {
		return x.BatchComboId
	}
	return ""
}

func (x *BatchComboSend) GetBatchComboNum() int32 {
	if x != nil {
		return x.BatchComboNum
	}
	return 0
}

func (x *BatchComboSend) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *BatchComboSend) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *BatchComboSend) GetGiftNum() int32 {
	if x != nil {
		return x.GiftNum
	}
	return 0
}

func (x *BatchComboSend) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BatchComboSend) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

var File_danmu_proto protoreflect.FileDescriptor

var file_danmu_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x22, 0x96,
	0x03, 0x0a, 0x09, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x6e, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x6e,
	0x6d, 0x75, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e,
	0x6d, 0x75, 0x2e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e,
	0x44, 0x61, 0x6e, 0x6d, 0x75, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x44,
	0x61, 0x6e, 0x6d, 0x75, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x2e,
	0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb7, 0x0b, 0x0a, 0x04, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x2e, 0x74, 0x75, 0x72, 0x73, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x6e, 0x6d, 0x75, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6d, 0x61,
	0x72, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6e, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x56, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x54, 0x56, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x74, 0x76, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x74, 0x76, 0x4d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x45, 0x0a, 0x0d, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x53, 0x74, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x68, 0x79,
	0x74, 0x68, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x0a, 0x0d, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x76, 0x69, 0x70, 0x22, 0x6a, 0x0a, 0x0e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x0e, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d,
	0x62, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x4e, 0x75,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x69, 0x66, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xdd, 0x05, 0x0a, 0x07, 0x43,
	0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x32,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x4e, 0x4d, 0x55, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x55,
	0x41, 0x52, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56,
	0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x4e, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x13,
	0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x4c, 0x43, 0x4f, 0x4d, 0x45,
	0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45, 0x4c, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x47, 0x55,
	0x41, 0x52, 0x44, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x53, 0x48, 0x5f, 0x42, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x46, 0x46,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x1b, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x10,
	0x1c, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x53, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4b, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x49, 0x46, 0x54,
	0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x22, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x23, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x24, 0x2a, 0x42, 0x0a, 0x0e, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4d, 0x49, 0x52, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x42, 0x11,
	0x42, 0x05, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x48, 0x01, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_danmu_proto_rawDescOnce sync.Once
	file_danmu_proto_rawDescData = file_danmu_proto_rawDesc
)

func file_danmu_proto_rawDescGZIP() []byte {
	file_danmu_proto_rawDescOnce.Do(func() {
		file_danmu_proto_rawDescData = protoimpl.X.CompressGZIP(file_danmu_proto_rawDescData)
	})
	return file_danmu_proto_rawDescData
}

var file_danmu_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_danmu_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_danmu_proto_goTypes = []interface{}{
	(CmeEnum)(0),           // 0: cn.tursom.danmu.CmeEnum
	(NavigationEnum)(0),    // 1: cn.tursom.danmu.NavigationEnum
	(*DanmuInfo)(nil),      // 2: cn.tursom.danmu.DanmuInfo
	(*Gift)(nil),           // 3: cn.tursom.danmu.Gift
	(*DanmuMetadata)(nil),  // 4: cn.tursom.danmu.DanmuMetadata
	(*DanmuUserInfo)(nil),  // 5: cn.tursom.danmu.DanmuUserInfo
	(*DanmuBrandInfo)(nil), // 6: cn.tursom.danmu.DanmuBrandInfo
	(*DanmuUserLevel)(nil), // 7: cn.tursom.danmu.DanmuUserLevel
	(*ComboSend)(nil),      // 8: cn.tursom.danmu.ComboSend
	(*BatchComboSend)(nil), // 9: cn.tursom.danmu.BatchComboSend
}
var file_danmu_proto_depIdxs = []int32{
	4, // 0: cn.tursom.danmu.DanmuInfo.metadata:type_name -> cn.tursom.danmu.DanmuMetadata
	5, // 1: cn.tursom.danmu.DanmuInfo.userInfo:type_name -> cn.tursom.danmu.DanmuUserInfo
	6, // 2: cn.tursom.danmu.DanmuInfo.brandInfo:type_name -> cn.tursom.danmu.DanmuBrandInfo
	7, // 3: cn.tursom.danmu.DanmuInfo.userLevel:type_name -> cn.tursom.danmu.DanmuUserLevel
	1, // 4: cn.tursom.danmu.DanmuInfo.navigation:type_name -> cn.tursom.danmu.NavigationEnum
	9, // 5: cn.tursom.danmu.Gift.batch_combo_send:type_name -> cn.tursom.danmu.BatchComboSend
	8, // 6: cn.tursom.danmu.Gift.combo_send:type_name -> cn.tursom.danmu.ComboSend
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_danmu_proto_init() }
func file_danmu_proto_init() {
	if File_danmu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_danmu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuBrandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DanmuUserLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_danmu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchComboSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_danmu_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_danmu_proto_goTypes,
		DependencyIndexes: file_danmu_proto_depIdxs,
		EnumInfos:         file_danmu_proto_enumTypes,
		MessageInfos:      file_danmu_proto_msgTypes,
	}.Build()
	File_danmu_proto = out.File
	file_danmu_proto_rawDesc = nil
	file_danmu_proto_goTypes = nil
	file_danmu_proto_depIdxs = nil
}
